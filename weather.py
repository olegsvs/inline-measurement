import datetime
from dotenv import load_dotenv
import os
import requests
from aiogram.utils.markdown import hbold

load_dotenv()
weather_api = os.getenv("OPENWEATHERMAP_API")


async def get_weather(city: str):
    date = datetime.datetime.now().strftime('%d.%m.%Y')
    code_to_smile = {
        "Clear": "\U00002600 –Ø—Å–Ω–æ",
        "Clouds": "\U00002601 –û–±–ª–∞—á–Ω–æ",
        "Rain": "\U00002614 –î–æ–∂–¥—å",
        "Drizzle": "\U00002614 –î–æ–∂–¥—å",
        "Thunderstorm": "\U000026A1 –ì—Ä–æ–∑–∞",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    data_weather = requests.get(
        f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api}&units=metric').json()

    if data_weather['cod'] == '404':
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
    weather_description = data_weather['weather'][0]['main']

    if weather_description in code_to_smile:
        wd = code_to_smile[weather_description]
    else:
        wd = '-'

    city = data_weather['name']
    feels_like = round(data_weather['main']['feels_like'])
    temp = round(data_weather['main']['temp'])
    temp_max = round(data_weather['main']['temp_max'])
    temp_min = round(data_weather['main']['temp_min'])
    humidity = data_weather['main']['humidity']
    sunrise = datetime.datetime.fromtimestamp(data_weather['sys']['sunrise'])
    sunset = datetime.datetime.fromtimestamp(data_weather['sys']['sunset'])
    forecast = (f'{hbold(city)} - {hbold(date)}\n'
                          f'Ô∏è{hbold(wd)}\n'
                          f'üå°Ô∏è {hbold("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")}: {hbold(temp)}‚ÑÉ\n'
                          f'üå°Ô∏è {hbold("–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫")}: {hbold(feels_like)}‚ÑÉ\n'
                          f'üå°Ô∏è {hbold("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")}: {hbold(temp_max)}‚ÑÉ\n'
                          f'üå°Ô∏è {hbold("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")}: {hbold(temp_min)}‚ÑÉ\n'
                          f'üíß {hbold("–í–ª–∞–∂–Ω–æ—Å—Ç—å")}: {hbold(humidity)}%\n'
                          f'üåÖ {hbold("–†–∞—Å—Å–≤–µ—Ç")}: {hbold(sunrise.strftime("%H:%M"))}\n'
                          f'üåá {hbold("–ó–∞–∫–∞—Ç")}: {hbold(sunset.strftime("%H:%M"))}')
    return forecast
